@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager

@page "/Room/{_roomName}/{_username}"

@if (_roomJoined)
{
	<h3>Room joined</h3>
	<div class="container" id="pnlChat">
		<div class="row">
			<div class="col-sm">
				<div class="input-group">
					<input class="form-control" placeholder="Type your message here" @bind="_message" />
					<div class="input-group-append">
						<button class="btn btn-outline-dark" type="button" @onclick="SendMessage">Send</button>
					</div>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-sm">
				<ul>
					@foreach (var chat in _roomMessages)
					{
						<li>
							@chat
						</li>
					}
				</ul>
			</div>
		</div>
	</div>
}
else // Join a Chat Room
{
	<div class="container" id="pnlJoin">
		<div class="row">
			<div class="col-sm">
				<h3>Join Room</h3>
				<input @bind="_roomName" />
				<br />
				<input type="button" value="Join Room" @onclick="JoinRoom" />
			</div>
		</div>
	</div>
}


@code {
	[Parameter]
	public string _roomName { get; set; }
	[Parameter]
	public string _username { get; set; }

	private HubConnection _hubConnection;

	private bool _roomJoined;

	private string _message;

	private List<string> _roomMessages = new List<string> { };

	protected override async Task OnInitializedAsync()
	{
		// Check if room exists
		_hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
			.Build();

		// Joining a room successful
		_hubConnection.On<string>("RoomJoined", (roomName) =>
		{
			// Room has been joined

			_roomJoined = true;
			StateHasChanged();
		});

		_hubConnection.On<string, string>("ReceiveMessage", async (username, message) =>
		{
			await ReceiveMessage(username, message);
		});

		await _hubConnection.StartAsync();

		await JoinRoom();
	}

	private async Task JoinRoom()
	{
		// Join the room
		await _hubConnection.SendAsync("JoinRoom", _roomName);
	}

	private async Task SendMessage()
	{
		// Dont send blank messages
		if (string.IsNullOrEmpty(_message))
			return;

		await _hubConnection.SendAsync("SendMessage", _roomName, _username, _message);

		// TODo Clear message
	}

	private async Task ReceiveMessage(string username, string message)
	{
		_roomMessages.Add($"<b>{username}: </b>{message}");
		StateHasChanged();
	}

}
