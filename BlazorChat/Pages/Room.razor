@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager

@page "/Room/{_roomName}/{_username}"

<h3>Room</h3>

@if (_roomJoined)
{
	<div class="container" id="pnlChat">
		<div class="row">

		</div>
		ROOM JOINED
	</div>
}
else // Join a Chat Room
{
	<div class="container" id="pnlJoin">
		<div class="row">
			<div class="col-sm">
				<h3>Join Room</h3>
				<input @bind="_roomName" />
				<br />
				<input type="button" value="Join Room" @onclick="JoinRoom" />
			</div>
		</div>
	</div>
}


<div class="container" id="pnlChat">
	<div class="row">
		<div class="col-sm">
			ROOM JOINED
		</div>
	</div>
	<div class="row">
		<div class="col-sm-11">
			<input class="form-control-plaintext" @bind="_message" />
		</div>
		<div class="col-sm-1">
			<input type="button" class="btn-primary" value="Send" @onclick="SendMessage" />
		</div>
	</div>
</div>


@code {
	[Parameter]
	public string _roomName { get; set; }
	[Parameter]
	public string _username { get; set; }

	private HubConnection _hubConnection;

	private bool _roomJoined;

	private string _message;

	protected override async Task OnInitializedAsync()
	{
		// Check if room exists
		_hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
			.Build();

		// Joining a room successful
		_hubConnection.On<string>("RoomJoined", (roomName) =>
		{
			// Room has been joined

			_roomJoined = true;
			StateHasChanged();
		});

		_hubConnection.On<string, string>("ReceiveMessage", (uername, message) =>
		{
			// TODO
		});

		await _hubConnection.StartAsync();

		await JoinRoom();
	}

	private async Task JoinRoom()
	{
		// Join the room
		await _hubConnection.SendAsync("JoinRoom", _roomName);
	}

	private async Task SendMessage()
	{
		// Dont send blank messages
		if (string.IsNullOrEmpty(_message))
			return;

		await _hubConnection.SendAsync("SendMessage", _roomName, _username, _message);

		// TODo Clear message
	}

	private async Task ReceiveMessage()
	{

	}

}
